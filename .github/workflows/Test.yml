name: Build Test

on:
  workflow_dispatch:
    inputs:
      package_names:
        description: "Comma-separated list of package paths to build (e.g., packages/coreutils,x11-packages/sdl2)"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Ubuntu and Docker (Fixed Docker Conflicts)
      - name: Set up Ubuntu and Docker
        run: |
          sudo apt-get update
          sudo apt-get remove -y containerd || true  # Remove conflicting package if exists
          sudo apt-get install -y \
              ca-certificates \
              curl \
              gnupg \
              lsb-release

          # Add Dockerâ€™s official GPG key
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Set up Docker repository
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Install Docker and dependencies
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          # Enable and start Docker
          sudo systemctl enable --now docker
          sudo systemctl status docker || true

          # Verify Docker installation
          sudo docker --version

      # Step 3: Set up Docker inside Docker (DinD)
      - name: Set up Docker inside Docker
        uses: docker/setup-docker-action@v3
        with:
          docker-run-args: --privileged

      # Step 4: Start the Docker container and set up the Android SDK
      - name: Set up Android SDK
        run: |
          sudo ./scripts/run-docker.sh ./scripts/setup-android-sdk.sh

      # Step 5: Install Python 3.11
      - name: Install Python
        run: |
          sudo ./scripts/run-docker.sh bash -c "
            sudo apt-get update
            sudo apt-get install -y software-properties-common
            sudo add-apt-repository ppa:deadsnakes/ppa -y
            sudo apt-get update
            sudo apt-get install -y python3.11
            python3.11 --version
          "

      # Step 6: Build Multiple Packages and Capture Logs
      - name: Build packages
        run: |
          IFS=',' read -r -a package_paths <<< "${{ github.event.inputs.package_names }}"
          for package_path in "${package_paths[@]}"; do
            echo "Building package: $package_path"
            sudo ./scripts/run-docker.sh ./build-package.sh -a aarch64 "$package_path" > "build_$package_path.log" 2>&1 || true
          done

          # Check for build failures
          for package_path in "${package_paths[@]}"; do
            if grep -q "ERROR" "build_$package_path.log"; then
              echo "Build failed for $package_path. Uploading logs..."
              echo "build_logs+=build_$package_path.log" >> $GITHUB_ENV
            fi
          done

      # Step 7: Upload build logs (if the build failed)
      - name: Upload build logs
        if: env.build_logs
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: ${{ env.build_logs }}

      # Step 8: Sanitize filenames in the output directory
      - name: Sanitize filenames
        if: success()
        run: |
          cd output
          for file in *; do
            new_name=$(echo "$file" | tr ':<>|*?"\r\n' '_')  # Replace invalid characters with underscores
            if [ "$file" != "$new_name" ]; then
              mv "$file" "$new_name"
            fi
          done

      # Step 9: Upload built artifacts (if the build succeeded)
      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: built-packages
          path: output/
