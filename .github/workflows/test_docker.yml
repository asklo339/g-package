name: Build Packages Container Test

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: "Name of the package to build"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Try to download the pre-built custom Ubuntu image artifact.
      - name: Download custom Ubuntu image artifact
        id: download-image
        uses: actions/download-artifact@v4
        with:
          name: custom-ubuntu-image
        continue-on-error: true

      # Step 3: If the artifact was downloaded, load the Docker image.
      - name: Load Docker image from artifact
        if: steps.download-image.outcome == 'success'
        run: |
          docker load -i custom-ubuntu-image/my-custom-ubuntu.tar

      # Step 4: If no pre-built image artifact exists, set up Ubuntu and Docker.
      - name: Set up Ubuntu and Docker
        if: steps.download-image.outcome != 'success'
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg lsb-release
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo docker --version
          sudo systemctl status docker

      # Step 5: Set up Docker-in-Docker (DinD) if needed.
      - name: Set up Docker inside Docker
        if: steps.download-image.outcome != 'success'
        uses: docker/setup-docker-action@v3
        with:
          docker-run-args: --privileged

      # Step 6: Set up Android SDK inside Docker.
      - name: Set up Android SDK
        if: steps.download-image.outcome != 'success'
        run: |
          sudo ./scripts/run-docker.sh ./scripts/setup-android-sdk.sh

      # Step 7: Start QEMU user static.
      - name: Start QEMU user static
        if: steps.download-image.outcome != 'success'
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      # Step 8: Install Python 3.11.
      - name: Install Python 3.11
        if: steps.download-image.outcome != 'success'
        run: |
          sudo ./scripts/run-docker.sh bash -c "\
            sudo apt-get update && \
            sudo apt-get install -y software-properties-common && \
            sudo add-apt-repository ppa:deadsnakes/ppa -y && \
            sudo apt-get update && \
            sudo apt-get install -y python3.11 && \
            python3.11 --version \
          "

      # Step 9: Build the package.
      - name: Build package
        run: |
          sudo ./scripts/run-docker.sh ./build-package.sh -a aarch64 ${{ github.event.inputs.package_name }}

      # Step 10: Sanitize filenames in the output directory.
      - name: Sanitize filenames
        if: success()
        run: |
          cd output
          for file in *; do
            new_name=$(echo "$file" | tr ':<>|*?"\r\n' '_')
            if [ "$file" != "$new_name" ]; then
              mv "$file" "$new_name"
            fi
          done

      # Step 11: Upload built artifacts.
      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: built-packages
          path: output/

      # Step 12: If we built the environment from scratch, commit and save it as a Docker image.
      - name: Save Docker image as tarball
        if: steps.download-image.outcome != 'success'
        run: |
          # Commit the most recent container (adjust the container selection as needed).
          docker commit $(docker ps -q -l) my-custom-ubuntu
          docker save -o my-custom-ubuntu.tar my-custom-ubuntu

      # Step 13: Upload the custom Ubuntu image artifact for future builds.
      - name: Upload custom Ubuntu image artifact
        if: steps.download-image.outcome != 'success'
        uses: actions/upload-artifact@v4
        with:
          name: custom-ubuntu-image
          path: my-custom-ubuntu.tar
